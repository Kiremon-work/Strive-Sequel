[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
//render_mode blend_premul_alpha;

vec3 rgb2hsl(vec3 c )
{
    float epsilon = 0.00000001;
    float cmin = min( c.r, min( c.g, c.b ) );
    float cmax = max( c.r, max( c.g, c.b ) );
    float cd   = cmax - cmin;
    vec3 hsl = vec3(0.0);
    hsl.z = (cmax + cmin) / 2.0;
    hsl.y = mix(cd / (cmax + cmin + epsilon), cd / (epsilon + 2.0 - (cmax + cmin)), step(0.5, hsl.z));

    vec3 a = vec3(1.0 - step(epsilon, abs(cmax - c)));
    a = mix(vec3(a.x, 0.0, a.z), a, step(0.5, 2.0 - a.x - a.y));
    a = mix(vec3(a.x, a.y, 0.0), a, step(0.5, 2.0 - a.x - a.z));
    a = mix(vec3(a.x, a.y, 0.0), a, step(0.5, 2.0 - a.y - a.z));
    
    hsl.x = dot( vec3(0.0, 2.0, 4.0) + ((c.gbr - c.brg) / (epsilon + cd)), a );
    hsl.x = (hsl.x + (1.0 - step(0.0, hsl.x) ) * 6.0 ) / 6.0;
	hsl.y = clamp (hsl.y, 0.0, 1.0);
    return hsl;
}

vec3 hsl2rgb(vec3 HSL)
{
  float R = abs(HSL.x * 6.0 - 3.0) - 1.0;
  float G = 2.0 - abs(HSL.x * 6.0 - 2.0);
  float B = 2.0 - abs(HSL.x * 6.0 - 4.0);
  vec3 RGB = clamp(vec3(R,G,B), 0.0, 1.0);
  float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;
  return (RGB - 0.5) * C + HSL.z;
}

float h_shift_mix(float h1, float h2, float power)
{
	float res;
	if (h1 > h2) {
		res = h2;
		h2 = h1;
		h1 = res;
		power = 1.0 - power;
	}
	if (h2 - h1 > 0.5){
		res = h2;
		h2 = h1 + 1.0;
		h1 = res;
		power = 1.0 - power;
	}
	res = h1 * (1.0 - power) + h2 * power;
	if (res > 1.0)
		res -= 1.0;
	return res;
}

uniform vec4 target_color : hint_color;
uniform vec4 outline_color : hint_color;
uniform float value;
uniform int posterize = 5;
uniform int outline = 1;
uniform float outline_opacity = 1.0;

void fragment(){
	vec4 col = texture(TEXTURE, UV);
	//colorization
	vec3 col_hls = rgb2hsl(col.rgb);
	vec3 targ_hls = rgb2hsl(target_color.rgb);
	col_hls.x = h_shift_mix(col_hls.x, targ_hls.x, value);
	col_hls.y = targ_hls.y;
	//posterize
	float tmp = float(posterize);
	col_hls.z = floor(col_hls.z * tmp) / tmp;
	col.rgb = hsl2rgb(col_hls);
	//border
	vec2 ps = TEXTURE_PIXEL_SIZE;
	float a;
	float maxa = col.a;
	float mina = col.a;
	
	for (float outline_width = 1.0; outline_width <= float(outline); outline_width += 0.5) {
		a = texture(TEXTURE, UV + vec2(0.0, -outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);

		a = texture(TEXTURE, UV + vec2(0.0, outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);

		a = texture(TEXTURE, UV + vec2(-outline_width, 0.0) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);

		a = texture(TEXTURE, UV + vec2(outline_width, 0.0) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);
		
		a = texture(TEXTURE, UV + vec2(outline_width, -outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);

		a = texture(TEXTURE, UV + vec2(outline_width, outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);
		
		a = texture(TEXTURE, UV + vec2(-outline_width, outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);
		
		a = texture(TEXTURE, UV + vec2(-outline_width, -outline_width) * ps).a;
		maxa = max(a, maxa);
		mina = min(a, mina);
	}
	
	vec4 col_bord = outline_color;
	col_bord.a = (maxa - mina) * outline_opacity;
	col = mix(col, col_bord, 1.0 - col.a);

	COLOR = col;
	//COLOR.rgb += outline_color.rgb * (maxa - mina);
	
	//COLOR = mix(col, outline_color, (maxa - mina) * outline_opacity);
}"

[resource]
shader = SubResource( 1 )
shader_param/target_color = Color( 0.443137, 0.376471, 0.309804, 1 )
shader_param/outline_color = Color( 0.156863, 0.0941176, 0.0196078, 1 )
shader_param/value = 1.0
shader_param/posterize = 15
shader_param/outline = 3
shader_param/outline_opacity = 1.0
