[gd_scene load_steps=11 format=2]

[ext_resource path="res://src/tools/auto_poly.gd" type="Script" id=1]
[ext_resource path="res://Character_generator/images/00_body_nude/tits_normal.png" type="Texture" id=2]
[ext_resource path="res://src/tools/deform_poly.gd" type="Script" id=3]
[ext_resource path="res://src/tools/deform_drag_point.gd" type="Script" id=4]
[ext_resource path="res://Character_generator/images/00_body_nude/tits_big.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 anchor1 = vec2(0.0);
uniform vec2 anchor2 = vec2(0.0);
uniform vec2 anchor3 = vec2(0.0);
uniform vec2 anchor4 = vec2(0.0);
uniform vec2 anchor5 = vec2(0.0);
uniform vec2 anchor6 = vec2(0.0);

uniform vec2 move1 = vec2(0.0);
uniform vec2 move2 = vec2(0.0);
uniform vec2 move3 = vec2(0.0);
uniform vec2 move4 = vec2(0.0);
uniform vec2 move5 = vec2(0.0);
uniform vec2 move6 = vec2(0.0);

uniform float range1 = 0.0;
uniform float range2 = 0.0;
uniform float range3 = 0.0;
uniform float range4 = 0.0;
uniform float range5 = 0.0;
uniform float range6 = 0.0;

uniform float power = 1.0;

void vertex(){
	vec2 offset = vec2(0.0);
	float dist = length(VERTEX - anchor1);
	
	if (dist < range1){
		offset += move1 * (range1 - dist) * power / range1;
	}
	dist = length(VERTEX - anchor2);
	if (dist < range2){
		offset += move2 * (range2 - dist) * power / range2;
	}
	dist = length(VERTEX - anchor3);
	if (dist < range3){
		offset += move3 * (range3 - dist) * power / range3;
	}
	dist = length(VERTEX - anchor4);
	if (dist < range4){
		offset += move4 * (range4 - dist) * power / range4;
	}
	dist = length(VERTEX - anchor5);
	if (dist < range5){
		offset += move5 * (range5 - dist) * power / range5;
	}
	dist = length(VERTEX - anchor6);
	if (dist < range6){
		offset += move6 * (range6 - dist) * power / range6;
	}
	VERTEX += offset;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/anchor1 = Vector2( 300, 530 )
shader_param/anchor2 = Vector2( 300, 575 )
shader_param/anchor3 = Vector2( 350, 600 )
shader_param/anchor4 = Vector2( 0, 0 )
shader_param/anchor5 = Vector2( 0, 0 )
shader_param/anchor6 = Vector2( 0, 0 )
shader_param/move1 = Vector2( -25, -10 )
shader_param/move2 = Vector2( -20, 10 )
shader_param/move3 = Vector2( -5, 10 )
shader_param/move4 = Vector2( 0, 0 )
shader_param/move5 = Vector2( 0, 0 )
shader_param/move6 = Vector2( 0, 0 )
shader_param/range1 = 100.0
shader_param/range2 = 50.0
shader_param/range3 = 60.0
shader_param/range4 = 0.0
shader_param/range5 = 0.0
shader_param/range6 = 0.0
shader_param/power = 1.0

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 1 )
shader_param/anchor1 = Vector2( 332.06, 579.463 )
shader_param/anchor2 = Vector2( 338.478, 524.439 )
shader_param/anchor3 = Vector2( 374.904, 568.31 )
shader_param/anchor4 = Vector2( 0, 0 )
shader_param/anchor5 = Vector2( 0, 0 )
shader_param/anchor6 = Vector2( 0, 0 )
shader_param/move1 = Vector2( 0, 0 )
shader_param/move2 = Vector2( 0, 0 )
shader_param/move3 = Vector2( 0, 0 )
shader_param/move4 = Vector2( 0, 0 )
shader_param/move5 = Vector2( 0, 0 )
shader_param/move6 = Vector2( 0, 0 )
shader_param/range1 = 60.0
shader_param/range2 = 70.0
shader_param/range3 = 40.0
shader_param/range4 = 0
shader_param/range5 = 0
shader_param/range6 = 0
shader_param/power = 1.0

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec2 anchor1 = vec2(0.0);
uniform vec2 anchor2 = vec2(0.0);
uniform vec2 anchor3 = vec2(0.0);
uniform vec2 anchor4 = vec2(0.0);
uniform vec2 anchor5 = vec2(0.0);
uniform vec2 anchor6 = vec2(0.0);

uniform vec2 move1 = vec2(0.0);
uniform vec2 move2 = vec2(0.0);
uniform vec2 move3 = vec2(0.0);
uniform vec2 move4 = vec2(0.0);
uniform vec2 move5 = vec2(0.0);
uniform vec2 move6 = vec2(0.0);

uniform float range1 = 0.0;
uniform float range2 = 0.0;
uniform float range3 = 0.0;
uniform float range4 = 0.0;
uniform float range5 = 0.0;
uniform float range6 = 0.0;

uniform float power = 1.0;


uniform vec4 target1color : hint_color;
uniform vec4 target2color : hint_color;
uniform vec4 target3color : hint_color;

uniform vec4 part1color : hint_color;
uniform vec4 part2color : hint_color;
uniform vec4 part3color : hint_color;

uniform sampler2D part1;
uniform sampler2D part2;
uniform sampler2D part3;

uniform float overlay = 0.7;

vec3 rgb2hsl(vec3 c )
{
    float epsilon = 0.00000001;
    float cmin = min( c.r, min( c.g, c.b ) );
    float cmax = max( c.r, max( c.g, c.b ) );
    float cd   = cmax - cmin;
    vec3 hsl = vec3(0.0);
    hsl.z = (cmax + cmin) / 2.0;
    hsl.y = mix(cd / (cmax + cmin + epsilon), cd / (epsilon + 2.0 - (cmax + cmin)), step(0.5, hsl.z));

    vec3 a = vec3(1.0 - step(epsilon, abs(cmax - c)));
    a = mix(vec3(a.x, 0.0, a.z), a, step(0.5, 2.0 - a.x - a.y));
    a = mix(vec3(a.x, a.y, 0.0), a, step(0.5, 2.0 - a.x - a.z));
    a = mix(vec3(a.x, a.y, 0.0), a, step(0.5, 2.0 - a.y - a.z));
    
    hsl.x = dot( vec3(0.0, 2.0, 4.0) + ((c.gbr - c.brg) / (epsilon + cd)), a );
    hsl.x = (hsl.x + (1.0 - step(0.0, hsl.x) ) * 6.0 ) / 6.0;
	hsl.y = clamp (hsl.y, 0.0, 1.0);
    return hsl;
}

vec3 hsl2rgb(vec3 HSL)
{
  float R = abs(HSL.x * 6.0 - 3.0) - 1.0;
  float G = 2.0 - abs(HSL.x * 6.0 - 2.0);
  float B = 2.0 - abs(HSL.x * 6.0 - 4.0);
  vec3 RGB = clamp(vec3(R,G,B), 0.0, 1.0);
  float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;
  return (RGB - 0.5) * C + HSL.z;
}

void fragment(){
    vec4 color = texture(TEXTURE, UV);
	float a = color.a;
	vec3 t1 = rgb2hsl(target1color.rgb);
	vec3 t2 = rgb2hsl(target2color.rgb);
	vec3 t3 = rgb2hsl(target3color.rgb);
	vec3 k = rgb2hsl(color.rgb);
	if (texture(part1, UV).a > 0.0){
		vec3 dcolor = rgb2hsl(part1color.rgb);
		float rot = dcolor.x - t1.x;
		k.x = k.x + rot;
		if (k.x > 1.0) k.x -= 1.0;
		if (k.x < 0.0) k.x += 1.0;
		k.y = dcolor.y;
		k.z *= dcolor.z/t1.z;
		k.z = clamp(k.z, 0.0, 1.0);
//		k.z *= dcolor.z;
		k = hsl2rgb(k);
		k = mix(color.rgb, k, overlay * texture(part1, UV).a);
		color = vec4(k.xyz, a);
	}
	k = rgb2hsl(color.rgb);
	if (texture(part2, UV).a > 0.0){
		vec3 dcolor = rgb2hsl(part2color.rgb);
		float rot = dcolor.x - t2.x;
		k.x = k.x + rot;
		if (k.x > 1.0) k.x -= 1.0;
		if (k.x < 0.0) k.x += 1.0;
		k.y = dcolor.y;
		k.z *= dcolor.z / t2.z;
		k.z = clamp(k.z, 0.0, 1.0);
//		k.z *= dcolor.z;
		k = hsl2rgb(k);
		k = mix(color.rgb, k, overlay* texture(part2, UV).a);
		color = vec4(k.xyz, a);
	}
	k = rgb2hsl(color.rgb);
	if (texture(part3, UV).a > 0.0){
		vec3 dcolor = rgb2hsl(part3color.rgb);
		float rot = dcolor.x - t3.x;
		k.x = k.x + rot;
		if (k.x > 1.0) k.x -= 1.0;
		if (k.x < 0.0) k.x += 1.0;
		k.y = dcolor.y;
		k.z *= dcolor.z / t3.z;
		k.z = clamp(k.z, 0.0, 1.0);
//		k.z *= dcolor.z;
		k = hsl2rgb(k);
		k = mix(color.rgb, k, overlay * texture(part3, UV).a);
		color = vec4(k.xyz, a);
	}
	COLOR = color;
}

void vertex(){
	vec2 offset = vec2(0.0);
	float dist = length(VERTEX - anchor1);
	
	if (dist < range1){
		offset += move1 * (range1 - dist) * power / range1;
	}
	dist = length(VERTEX - anchor2);
	if (dist < range2){
		offset += move2 * (range2 - dist) * power / range2;
	}
	dist = length(VERTEX - anchor3);
	if (dist < range3){
		offset += move3 * (range3 - dist) * power / range3;
	}
	dist = length(VERTEX - anchor4);
	if (dist < range4){
		offset += move4 * (range4 - dist) * power / range4;
	}
	dist = length(VERTEX - anchor5);
	if (dist < range5){
		offset += move5 * (range5 - dist) * power / range5;
	}
	dist = length(VERTEX - anchor6);
	if (dist < range6){
		offset += move6 * (range6 - dist) * power / range6;
	}
	VERTEX += offset;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/anchor1 = Vector2( 436, 590 )
shader_param/anchor2 = Vector2( 346, 561 )
shader_param/anchor3 = Vector2( 535, 561 )
shader_param/anchor4 = Vector2( 0, 0 )
shader_param/anchor5 = Vector2( 0, 0 )
shader_param/anchor6 = Vector2( 0, 0 )
shader_param/move1 = Vector2( 0, 0 )
shader_param/move2 = Vector2( 0, 0 )
shader_param/move3 = Vector2( 0, 0 )
shader_param/move4 = Vector2( 0, 0 )
shader_param/move5 = Vector2( 0, 0 )
shader_param/move6 = Vector2( 0, 0 )
shader_param/range1 = 0
shader_param/range2 = 110.0
shader_param/range3 = 110.0
shader_param/range4 = 0
shader_param/range5 = 0
shader_param/range6 = 0
shader_param/power = 1.0
shader_param/target1color = Color( 1, 0, 0, 1 )
shader_param/target2color = Color( 1, 0, 0, 1 )
shader_param/target3color = Color( 1, 0, 0, 1 )
shader_param/part1color = Color( 1, 0, 0, 1 )
shader_param/part2color = Color( 1, 0, 0, 1 )
shader_param/part3color = Color( 1, 0, 0, 1 )
shader_param/overlay = 0.0

[node name="Node2D" type="Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -1.78177
margin_right = -1.78174
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AutoPoly" type="Polygon2D" parent="."]
material = SubResource( 2 )
position = Vector2( -183.948, -309.94 )
texture = ExtResource( 2 )
polygon = PoolVector2Array( 339, 457, 316, 484, 296, 522, 292, 557, 310, 589, 347, 607, 385, 600, 411, 565, 428, 592, 463, 606, 495, 614, 527, 590, 543, 543, 533, 499, 504, 465, 474, 454, 438, 458, 422, 471, 393, 454, 367, 449, 309.005, 556.038, 316.114, 521.44, 333.649, 498.218, 353.081, 474.521, 379.621, 474.995, 398.578, 486.843, 405.213, 496.322, 430.806, 496.796, 443.128, 481.156, 464.929, 475.943, 489.574, 483.526, 504.265, 501.535, 519.431, 531.867, 517.536, 565.99, 486.256, 588.265, 454.976, 586.369, 433.175, 568.834, 423.697, 541.82, 424.171, 518.123, 404.265, 518.123, 401.896, 541.82, 393.365, 561.251, 379.147, 576.417, 360.19, 588.739, 335.545, 585.421, 316.114, 574.047, 321.327, 527.602, 336.967, 528.549, 346.919, 541.346, 344.55, 553.194, 327.488, 552.72, 317.062, 545.611, 496.209, 526.18, 486.73, 536.606, 490.047, 548.929, 499.526, 548.455, 512.796, 547.981, 509.005, 526.654, 354.976, 497.744, 379.621, 509.592, 380.569, 535.184, 443.602, 529.023, 448.341, 512.436, 464.455, 495.374, 464.455, 495.848 )
uv = PoolVector2Array( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
polygons = [ [ 1, 2, 21 ], [ 1, 21, 22 ], [ 0, 1, 23 ], [ 1, 22, 23 ], [ 19, 0, 23 ], [ 18, 19, 24 ], [ 19, 23, 24 ], [ 17, 18, 25 ], [ 18, 24, 25 ], [ 17, 25, 26 ], [ 17, 26, 27 ], [ 16, 17, 28 ], [ 17, 27, 28 ], [ 15, 16, 29 ], [ 16, 28, 29 ], [ 14, 15, 30 ], [ 15, 29, 30 ], [ 13, 14, 31 ], [ 14, 30, 31 ], [ 12, 13, 32 ], [ 11, 12, 33 ], [ 9, 10, 34 ], [ 10, 11, 34 ], [ 11, 33, 34 ], [ 8, 9, 35 ], [ 9, 34, 35 ], [ 7, 8, 36 ], [ 8, 35, 36 ], [ 7, 36, 37 ], [ 27, 26, 38 ], [ 37, 38, 39 ], [ 38, 26, 39 ], [ 7, 37, 40 ], [ 37, 39, 40 ], [ 7, 40, 41 ], [ 6, 7, 42 ], [ 7, 41, 42 ], [ 5, 6, 43 ], [ 6, 42, 43 ], [ 4, 5, 44 ], [ 5, 43, 44 ], [ 3, 4, 45 ], [ 20, 3, 45 ], [ 4, 44, 45 ], [ 22, 21, 47 ], [ 21, 46, 47 ], [ 43, 42, 49 ], [ 44, 43, 49 ], [ 20, 45, 50 ], [ 45, 44, 50 ], [ 44, 49, 50 ], [ 48, 47, 50 ], [ 49, 48, 50 ], [ 2, 3, 51 ], [ 3, 20, 51 ], [ 21, 2, 51 ], [ 46, 21, 51 ], [ 20, 50, 51 ], [ 47, 46, 51 ], [ 50, 47, 51 ], [ 35, 34, 54 ], [ 36, 35, 54 ], [ 52, 53, 55 ], [ 53, 54, 55 ], [ 34, 33, 55 ], [ 54, 34, 55 ], [ 12, 32, 56 ], [ 33, 12, 56 ], [ 55, 33, 56 ], [ 13, 31, 57 ], [ 32, 13, 57 ], [ 31, 52, 57 ], [ 56, 32, 57 ], [ 52, 55, 57 ], [ 55, 56, 57 ], [ 23, 22, 58 ], [ 24, 23, 58 ], [ 22, 47, 58 ], [ 26, 25, 59 ], [ 39, 26, 59 ], [ 25, 24, 59 ], [ 24, 58, 59 ], [ 47, 48, 59 ], [ 58, 47, 59 ], [ 41, 40, 60 ], [ 42, 41, 60 ], [ 49, 42, 60 ], [ 48, 49, 60 ], [ 40, 39, 60 ], [ 39, 59, 60 ], [ 59, 48, 60 ], [ 37, 36, 61 ], [ 38, 37, 61 ], [ 36, 54, 61 ], [ 54, 53, 61 ], [ 28, 27, 62 ], [ 61, 53, 62 ], [ 27, 38, 62 ], [ 38, 61, 62 ], [ 29, 28, 63 ], [ 30, 29, 63 ], [ 31, 30, 64 ], [ 30, 63, 64 ], [ 52, 31, 64 ], [ 28, 62, 64 ], [ 63, 28, 64 ], [ 53, 52, 64 ], [ 62, 53, 64 ] ]
internal_vertex_count = 45
script = ExtResource( 1 )
auto_poly = true
copy_uvs = null

[node name="Position2D" type="Position2D" parent="."]
position = Vector2( 246, 316 )
__meta__ = {
"_gizmo_extents_": 50.0
}

[node name="DeformPoly" type="Polygon2D" parent="."]
material = SubResource( 3 )
position = Vector2( 905.097, 124.451 )
texture = ExtResource( 2 )
polygon = PoolVector2Array( 336.019, 449.402, 304.739, 503.905, 275.829, 555.09, 321.801, 612.91, 447.393, 617.175, 556.872, 608.17, 581.991, 480.682, 484.834, 433.763, 363.033, 436.606, 294.787, 542.767, 302.37, 517.649, 321.327, 485.895, 337.441, 467.412, 358.294, 458.407, 378.673, 460.303, 397.156, 469.782, 406.635, 491.109, 409.479, 513.383, 408.057, 546.559, 400, 565.99, 387.204, 586.843, 361.611, 597.744, 332.701, 597.27, 309.005, 578.786, 298.104, 559.829, 316.114, 526.654, 330.332, 520.019, 342.654, 524.284, 340.758, 543.241, 330.332, 551.772, 314.218, 541.346, 334.123, 493.004, 360.19, 472.625, 385.308, 483.052, 390.521, 512.436, 388.152, 539.924, 373.934, 566.938, 349.289, 574.995, 320.379, 567.886, 305.687, 548.455, 309.005, 530.445, 320.379, 504.853 )
uv = PoolVector2Array( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
polygons = [ [ 1, 2, 10 ], [ 2, 9, 10 ], [ 0, 1, 11 ], [ 0, 11, 12 ], [ 8, 0, 13 ], [ 0, 12, 13 ], [ 8, 13, 14 ], [ 7, 8, 15 ], [ 8, 14, 15 ], [ 7, 15, 16 ], [ 5, 6, 17 ], [ 6, 7, 17 ], [ 7, 16, 17 ], [ 4, 5, 18 ], [ 5, 17, 18 ], [ 4, 18, 19 ], [ 4, 19, 20 ], [ 3, 4, 21 ], [ 4, 20, 21 ], [ 3, 21, 22 ], [ 2, 3, 23 ], [ 3, 22, 23 ], [ 9, 2, 24 ], [ 2, 23, 24 ], [ 26, 25, 28 ], [ 27, 26, 28 ], [ 28, 25, 30 ], [ 29, 28, 30 ], [ 12, 11, 31 ], [ 26, 27, 31 ], [ 13, 12, 32 ], [ 12, 31, 32 ], [ 14, 13, 32 ], [ 31, 27, 32 ], [ 15, 14, 33 ], [ 14, 32, 33 ], [ 16, 15, 33 ], [ 17, 16, 34 ], [ 16, 33, 34 ], [ 32, 27, 34 ], [ 33, 32, 34 ], [ 19, 18, 35 ], [ 18, 17, 35 ], [ 17, 34, 35 ], [ 27, 28, 35 ], [ 34, 27, 35 ], [ 21, 20, 36 ], [ 20, 19, 36 ], [ 19, 35, 36 ], [ 35, 28, 36 ], [ 22, 21, 37 ], [ 21, 36, 37 ], [ 28, 29, 37 ], [ 36, 28, 37 ], [ 24, 23, 38 ], [ 23, 22, 38 ], [ 22, 37, 38 ], [ 37, 29, 38 ], [ 9, 24, 39 ], [ 29, 30, 39 ], [ 38, 29, 39 ], [ 24, 38, 39 ], [ 10, 9, 40 ], [ 25, 10, 40 ], [ 30, 25, 40 ], [ 9, 39, 40 ], [ 39, 30, 40 ], [ 1, 10, 41 ], [ 10, 25, 41 ], [ 25, 26, 41 ], [ 11, 1, 41 ], [ 31, 11, 41 ], [ 26, 31, 41 ] ]
internal_vertex_count = 33
script = ExtResource( 3 )
auto_poly = true
copy_uvs = null

[node name="Position2D" type="Position2D" parent="DeformPoly"]
position = Vector2( 332.06, 579.463 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 60.0
}
anchor = Vector2( 332.06, 579.463 )
lock_anchor_position = true

[node name="Position2D2" type="Position2D" parent="DeformPoly"]
position = Vector2( 338.478, 524.439 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 70.0
}
anchor = Vector2( 338.478, 524.439 )
lock_anchor_position = true

[node name="Position2D3" type="Position2D" parent="DeformPoly"]
position = Vector2( 374.904, 568.31 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 40.0
}
anchor = Vector2( 374.904, 568.31 )
lock_anchor_position = true

[node name="Position2D4" type="Position2D" parent="DeformPoly"]
script = ExtResource( 4 )

[node name="Position2D5" type="Position2D" parent="DeformPoly"]
script = ExtResource( 4 )

[node name="Position2D6" type="Position2D" parent="DeformPoly"]
script = ExtResource( 4 )

[node name="Nipples_mesh" type="Polygon2D" parent="."]
material = SubResource( 5 )
position = Vector2( 536, 133 )
offset = Vector2( 0, -1 )
texture = ExtResource( 5 )
polygon = PoolVector2Array( 346.158, 467.629, 337.286, 475.204, 330.388, 481.259, 323.56, 493.29, 313.747, 505.356, 306.404, 515.898, 301.551, 526.411, 296.68, 535.431, 293.331, 546.923, 291.974, 558.389, 291.121, 570.349, 293.243, 581.277, 294.854, 591.215, 298.446, 600.134, 302.529, 608.549, 309.593, 616.432, 317.646, 623.804, 325.178, 629.19, 337.185, 634.026, 347.669, 636.39, 362.615, 637.208, 375.036, 635.068, 388.441, 631.922, 399.352, 628.307, 411.779, 626.666, 420.739, 626.559, 430.696, 626.44, 445.161, 628.758, 457.619, 629.605, 468.593, 631.465, 479.569, 633.327, 491.037, 634.683, 505.491, 636.005, 514.948, 635.892, 525.882, 634.268, 539.299, 632.118, 551.17, 625.503, 560.053, 618.926, 568.89, 608.366, 575.236, 597.834, 580.599, 588.311, 583.438, 575.83, 583.787, 563.379, 583.627, 549.939, 579.468, 535.052, 573.831, 521.677, 567.218, 509.806, 562.109, 498.914, 554.536, 490.042, 544.449, 479.209, 532.894, 470.385, 520.365, 463.564, 512.371, 461.17, 520.365, 463.564, 501.395, 459.309, 483.462, 458.526, 464.534, 457.757, 449.096, 457.442, 436.639, 456.594, 420.218, 457.288, 407.281, 457.94, 387.854, 457.175, 369.94, 457.887, 355.058, 462.544, 329.328, 559.438, 549.866, 557.809, 536.698, 539.047, 529.302, 545.108, 525.965, 557.596, 527.613, 570.52, 536.129, 574.9, 548.615, 578.237, 558.547, 576.126, 565.885, 565.086, 567.236, 553.12, 562.116, 541.233, 551.111, 536.883, 321.096, 537.132, 310.215, 543.236, 306.393, 556.724, 307.531, 568.66, 315.105, 577.531, 327.11, 582.367, 340.03, 580.221, 348.919, 574.141, 350.751, 560.676, 347.598, 546.774, 335.55, 538.453, 308.562, 529.813, 317.439, 522.737, 330.329, 518.102, 349.761, 519.366, 363.788, 526.667, 374.906, 540.474, 380.115, 559.829, 377.313, 575.297, 370.034, 591.316, 355.183, 598.462, 340.297, 602.623, 322.34, 599.849, 306.309, 591.576, 300.698, 580.192, 323.205, 505.243, 339.532, 496.585, 357.986, 499.352, 375.018, 508.112, 388.619, 521.392, 395.305, 539.235, 395.524, 557.654, 392.791, 579.096, 387.019, 596.092, 378.207, 608.644, 363.35, 615.293, 348.452, 618.458, 328, 615.216, 310.98, 607.452, 407.916, 469.383, 422.558, 486.635, 428.207, 501.005, 429.884, 516.42, 429.594, 533.849, 429.819, 552.766, 426.037, 569.739, 419.767, 586.74, 412.478, 601.764, 402.178, 614.831, 386.355, 623.98, 369.496, 629.658, 461.677, 468.743, 454.382, 483.268, 448.089, 498.279, 444.279, 512.763, 441.95, 526.233, 440.154, 542.685, 439.864, 560.114, 443.538, 576.002, 448.688, 590.38, 457.346, 606.706, 471.942, 619.975, 484.464, 626.298, 564.942, 527.757, 552.42, 521.433, 536.976, 520.622, 525.539, 521.753, 514.717, 532.835, 510.391, 545.832, 507.636, 565.282, 509.33, 582.19, 516.933, 593.55, 533.942, 600.318, 547.887, 600.649, 560.806, 598.503, 569.659, 589.437, 555.229, 506.464, 538.204, 498.202, 525.716, 494.866, 513.265, 494.516, 501.396, 501.13, 491.107, 515.194, 485.828, 531.686, 482.651, 557.613, 483.883, 577.513, 488.535, 591.896, 497.643, 604.234, 511.719, 615.518, 528.704, 620.295, 542.612, 617.64, 539.554, 486.238, 523.043, 479.464, 507.084, 477.165, 491.677, 479.339, 475.889, 491.476, 467.177, 512.49, 463.889, 528.96, 462.667, 551.876, 464.89, 571.267, 470.562, 587.63, 478.206, 602.475, 487.285, 612.324, 498.326, 619.661, 512.833, 625.463, 346.318, 481.069, 360.227, 478.414, 374.645, 476.749, 390.675, 485.023, 400.773, 496.852, 408.958, 515.176, 410.629, 530.092, 409.847, 548.025, 411.05, 565.436, 404.798, 583.932, 397.491, 597.461, 389.668, 609.504, 377.834, 619.103, 436.787, 469.039, 436.959, 483.476, 438.163, 500.887, 433.498, 569.151, 433.178, 584.091, 432.313, 595.055, 431.471, 608.01, 431.069, 615.98, 441.837, 600.419, 446.448, 611.317, 422.458, 603.636, 416.638, 616.65 )
uv = PoolVector2Array
polygons = [ [ 3, 2, 4 ], [ 6, 5, 7 ], [ 11, 10, 12 ], [ 23, 22, 24 ], [ 24, 22, 25 ], [ 22, 21, 27 ], [ 25, 22, 27 ], [ 26, 25, 27 ], [ 27, 21, 29 ], [ 28, 27, 29 ], [ 21, 20, 30 ], [ 29, 21, 30 ], [ 30, 20, 31 ], [ 31, 20, 32 ], [ 46, 45, 47 ], [ 56, 55, 58 ], [ 57, 56, 58 ], [ 59, 58, 61 ], [ 60, 59, 61 ], [ 65, 66, 67 ], [ 65, 67, 68 ], [ 65, 68, 70 ], [ 68, 69, 70 ], [ 65, 70, 71 ], [ 65, 71, 72 ], [ 41, 42, 73 ], [ 72, 41, 73 ], [ 65, 72, 73 ], [ 42, 43, 74 ], [ 73, 42, 74 ], [ 43, 44, 74 ], [ 65, 73, 74 ], [ 74, 44, 75 ], [ 65, 74, 75 ], [ 66, 65, 76 ], [ 65, 75, 76 ], [ 7, 8, 78 ], [ 64, 77, 78 ], [ 8, 9, 79 ], [ 78, 8, 79 ], [ 64, 78, 79 ], [ 9, 10, 80 ], [ 79, 9, 80 ], [ 64, 79, 80 ], [ 64, 80, 81 ], [ 64, 81, 82 ], [ 64, 82, 83 ], [ 64, 83, 84 ], [ 64, 84, 85 ], [ 64, 85, 86 ], [ 77, 64, 87 ], [ 64, 86, 87 ], [ 5, 6, 88 ], [ 6, 7, 88 ], [ 7, 78, 88 ], [ 78, 77, 88 ], [ 4, 5, 89 ], [ 5, 88, 89 ], [ 88, 77, 89 ], [ 77, 87, 90 ], [ 89, 77, 90 ], [ 87, 86, 91 ], [ 90, 87, 91 ], [ 91, 86, 92 ], [ 86, 85, 93 ], [ 92, 86, 93 ], [ 93, 85, 94 ], [ 85, 84, 95 ], [ 94, 85, 95 ], [ 95, 84, 96 ], [ 84, 83, 97 ], [ 96, 84, 97 ], [ 83, 82, 98 ], [ 97, 83, 98 ], [ 98, 82, 99 ], [ 12, 13, 100 ], [ 82, 81, 100 ], [ 99, 82, 100 ], [ 10, 11, 101 ], [ 80, 10, 101 ], [ 81, 80, 101 ], [ 11, 12, 101 ], [ 12, 100, 101 ], [ 100, 81, 101 ], [ 3, 4, 102 ], [ 4, 89, 102 ], [ 89, 90, 102 ], [ 2, 3, 103 ], [ 90, 91, 103 ], [ 102, 90, 103 ], [ 3, 102, 103 ], [ 103, 91, 104 ], [ 91, 92, 105 ], [ 104, 91, 105 ], [ 92, 93, 106 ], [ 105, 92, 106 ], [ 93, 94, 107 ], [ 106, 93, 107 ], [ 107, 94, 108 ], [ 94, 95, 109 ], [ 108, 94, 109 ], [ 95, 96, 110 ], [ 109, 95, 110 ], [ 110, 96, 111 ], [ 96, 97, 112 ], [ 111, 96, 112 ], [ 18, 19, 113 ], [ 19, 20, 113 ], [ 20, 112, 113 ], [ 97, 98, 113 ], [ 112, 97, 113 ], [ 16, 17, 114 ], [ 15, 16, 114 ], [ 98, 99, 114 ], [ 17, 18, 114 ], [ 18, 113, 114 ], [ 113, 98, 114 ], [ 14, 15, 115 ], [ 13, 14, 115 ], [ 100, 13, 115 ], [ 99, 100, 115 ], [ 15, 114, 115 ], [ 114, 99, 115 ], [ 60, 61, 116 ], [ 59, 60, 116 ], [ 23, 24, 125 ], [ 21, 22, 126 ], [ 22, 23, 126 ], [ 23, 125, 126 ], [ 20, 21, 127 ], [ 112, 20, 127 ], [ 55, 56, 128 ], [ 56, 57, 128 ], [ 119, 120, 132 ], [ 131, 119, 132 ], [ 120, 121, 133 ], [ 132, 120, 133 ], [ 133, 121, 134 ], [ 29, 30, 138 ], [ 28, 29, 138 ], [ 137, 28, 138 ], [ 30, 31, 139 ], [ 138, 30, 139 ], [ 44, 45, 140 ], [ 75, 44, 140 ], [ 45, 46, 140 ], [ 76, 75, 140 ], [ 76, 140, 141 ], [ 140, 46, 141 ], [ 66, 76, 142 ], [ 76, 141, 142 ], [ 66, 142, 143 ], [ 67, 66, 144 ], [ 66, 143, 144 ], [ 68, 67, 145 ], [ 67, 144, 145 ], [ 69, 68, 146 ], [ 68, 145, 146 ], [ 69, 146, 147 ], [ 70, 69, 148 ], [ 69, 147, 148 ], [ 71, 70, 149 ], [ 70, 148, 149 ], [ 71, 149, 150 ], [ 38, 39, 151 ], [ 72, 71, 151 ], [ 71, 150, 151 ], [ 37, 38, 151 ], [ 150, 37, 151 ], [ 40, 41, 152 ], [ 41, 72, 152 ], [ 39, 40, 152 ], [ 151, 39, 152 ], [ 72, 151, 152 ], [ 47, 48, 153 ], [ 46, 47, 153 ], [ 141, 46, 153 ], [ 142, 141, 153 ], [ 143, 142, 154 ], [ 142, 153, 154 ], [ 153, 48, 154 ], [ 143, 154, 155 ], [ 143, 155, 156 ], [ 144, 143, 157 ], [ 143, 156, 157 ], [ 144, 157, 158 ], [ 145, 144, 159 ], [ 144, 158, 159 ], [ 146, 145, 160 ], [ 145, 159, 160 ], [ 147, 146, 161 ], [ 146, 160, 161 ], [ 147, 161, 162 ], [ 148, 147, 163 ], [ 147, 162, 163 ], [ 149, 148, 164 ], [ 148, 163, 164 ], [ 34, 35, 165 ], [ 149, 164, 165 ], [ 36, 37, 166 ], [ 37, 150, 166 ], [ 35, 36, 166 ], [ 165, 35, 166 ], [ 150, 149, 166 ], [ 149, 165, 166 ], [ 48, 49, 167 ], [ 154, 48, 167 ], [ 49, 50, 167 ], [ 155, 154, 167 ], [ 50, 53, 168 ], [ 156, 155, 168 ], [ 155, 167, 168 ], [ 167, 50, 168 ], [ 52, 54, 169 ], [ 157, 156, 169 ], [ 53, 52, 169 ], [ 168, 53, 169 ], [ 156, 168, 169 ], [ 55, 128, 170 ], [ 54, 55, 170 ], [ 169, 54, 170 ], [ 157, 169, 170 ], [ 129, 130, 171 ], [ 128, 129, 171 ], [ 170, 128, 171 ], [ 158, 157, 171 ], [ 157, 170, 171 ], [ 159, 158, 172 ], [ 130, 131, 172 ], [ 171, 130, 172 ], [ 158, 171, 172 ], [ 132, 133, 173 ], [ 131, 132, 173 ], [ 172, 131, 173 ], [ 159, 172, 173 ], [ 133, 134, 174 ], [ 173, 133, 174 ], [ 160, 159, 174 ], [ 159, 173, 174 ], [ 135, 136, 175 ], [ 134, 135, 175 ], [ 174, 134, 175 ], [ 161, 160, 175 ], [ 160, 174, 175 ], [ 136, 137, 176 ], [ 175, 136, 176 ], [ 162, 161, 176 ], [ 161, 175, 176 ], [ 163, 162, 177 ], [ 137, 138, 177 ], [ 176, 137, 177 ], [ 162, 176, 177 ], [ 138, 139, 178 ], [ 177, 138, 178 ], [ 163, 177, 178 ], [ 31, 32, 179 ], [ 139, 31, 179 ], [ 178, 139, 179 ], [ 164, 163, 179 ], [ 163, 178, 179 ], [ 32, 33, 180 ], [ 33, 34, 180 ], [ 34, 165, 180 ], [ 165, 164, 180 ], [ 164, 179, 180 ], [ 179, 32, 180 ], [ 1, 2, 181 ], [ 2, 103, 181 ], [ 0, 1, 181 ], [ 103, 104, 181 ], [ 62, 63, 182 ], [ 63, 0, 182 ], [ 0, 181, 182 ], [ 181, 104, 182 ], [ 61, 62, 183 ], [ 62, 182, 183 ], [ 104, 105, 183 ], [ 182, 104, 183 ], [ 183, 105, 184 ], [ 116, 61, 184 ], [ 61, 183, 184 ], [ 105, 106, 185 ], [ 184, 105, 185 ], [ 117, 116, 185 ], [ 116, 184, 185 ], [ 118, 117, 185 ], [ 185, 106, 186 ], [ 119, 118, 186 ], [ 118, 185, 186 ], [ 106, 107, 187 ], [ 186, 106, 187 ], [ 120, 119, 187 ], [ 119, 186, 187 ], [ 107, 108, 188 ], [ 187, 107, 188 ], [ 121, 120, 188 ], [ 120, 187, 188 ], [ 108, 109, 189 ], [ 123, 122, 189 ], [ 188, 108, 189 ], [ 122, 121, 189 ], [ 121, 188, 189 ], [ 124, 123, 190 ], [ 123, 189, 190 ], [ 189, 109, 190 ], [ 125, 124, 191 ], [ 109, 110, 191 ], [ 190, 109, 191 ], [ 124, 190, 191 ], [ 126, 125, 192 ], [ 110, 111, 192 ], [ 191, 110, 192 ], [ 125, 191, 192 ], [ 111, 112, 193 ], [ 112, 127, 193 ], [ 21, 126, 193 ], [ 127, 21, 193 ], [ 126, 192, 193 ], [ 192, 111, 193 ], [ 58, 59, 194 ], [ 59, 116, 194 ], [ 116, 117, 194 ], [ 57, 58, 194 ], [ 128, 57, 194 ], [ 129, 128, 194 ], [ 117, 118, 195 ], [ 130, 129, 195 ], [ 129, 194, 195 ], [ 194, 117, 195 ], [ 118, 119, 196 ], [ 119, 131, 196 ], [ 131, 130, 196 ], [ 130, 195, 196 ], [ 195, 118, 196 ], [ 121, 122, 197 ], [ 134, 121, 197 ], [ 135, 134, 197 ], [ 136, 135, 198 ], [ 122, 123, 198 ], [ 197, 122, 198 ], [ 135, 197, 198 ], [ 198, 123, 199 ], [ 136, 198, 199 ], [ 25, 26, 201 ], [ 26, 27, 201 ], [ 137, 136, 202 ], [ 136, 199, 202 ], [ 199, 200, 202 ], [ 27, 28, 203 ], [ 28, 137, 203 ], [ 201, 27, 203 ], [ 200, 201, 203 ], [ 202, 200, 203 ], [ 137, 202, 203 ], [ 123, 124, 204 ], [ 199, 123, 204 ], [ 200, 199, 204 ], [ 201, 200, 204 ], [ 124, 125, 205 ], [ 125, 24, 205 ], [ 24, 25, 205 ], [ 204, 124, 205 ], [ 25, 201, 205 ], [ 201, 204, 205 ] ]
internal_vertex_count = 142
script = ExtResource( 3 )
auto_poly = true
copy_uvs = null

[node name="Position2D" type="Position2D" parent="Nipples_mesh"]
visible = false
position = Vector2( 436, 590 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 100.0
}
anchor = Vector2( 436, 590 )

[node name="Position2D2" type="Position2D" parent="Nipples_mesh"]
position = Vector2( 346, 561 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 110.0
}
anchor = Vector2( 346, 561 )
lock_anchor_position = true

[node name="Position2D3" type="Position2D" parent="Nipples_mesh"]
position = Vector2( 535, 561 )
script = ExtResource( 4 )
__meta__ = {
"_gizmo_extents_": 110.0
}
anchor = Vector2( 535, 561 )
lock_anchor_position = true

[node name="Position2D4" type="Position2D" parent="Nipples_mesh"]
visible = false
script = ExtResource( 4 )

[node name="Position2D5" type="Position2D" parent="Nipples_mesh"]
visible = false
script = ExtResource( 4 )

[node name="Position2D6" type="Position2D" parent="Nipples_mesh"]
visible = false
script = ExtResource( 4 )
